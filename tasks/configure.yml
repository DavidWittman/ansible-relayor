---

- name: ensure local key folders exist (LOCAL)
  file: path={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}
    state=directory
  delegate_to: 127.0.0.1
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd
   - createdir

- name: Ensure all relay keys exist (LOCAL)
  local_action: shell tor --PublishServerDescriptor 0 --orport 1234 --list-fingerprint --datadirectory {{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }} --Log "err stdout" > /dev/null
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: detect duplicate relay keys across relays (LOCAL)
  shell: sha1sum {{ offline_masterkey_dir }}/*/keys/secret_id_key {{ offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l
  delegate_to: 127.0.0.1
  register: dupcount
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: abort on duplicate relay keys
  fail: msg="Duplicate relay key detected! Aborting."
  when: dupcount.stdout != "0"
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: collect fingerprints for MyFamily (LOCAL)
  shell: cut {{ offline_masterkey_dir }}/*/fingerprint -d" " -f2|xargs|sed -e 's/ /,/g'
  delegate_to: 127.0.0.1
  register: family
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd
   - reconfigure

- name: Ensure Tor DataDir(s) exist and is owned by tor_user
  become: yes
  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}
    state=directory
    owner={{ tor_user }}
    mode=0700
    recurse=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd
   - createdir

- name: Ensure Tor "keys" directory exists and is owned by tor_user
  become: yes
  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys
    state=directory
    owner={{ tor_user }}
    mode=0700
    recurse=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: Ensure RSA key is in place (without overriding existing keys)
  become: yes
  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }} owner={{ tor_user }} mode=700 force=no
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: fetch RSA key for comparision
  become: yes
  fetch: src={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
    dest={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey
    flat=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]

- name: compare local vs. remote RSA key (secret_id_key)
  local_action: shell sha1sum {{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  register: rsakey

- name: abort if local and remote RSA keys do not match
  fail: 'msg="


   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.

   We deteted that the remote host uses an RSA key that was not generated by us.
   We will not override it with our locally generated key.

   If you want to make use of the remote RSA key you have to override the local key manually:


   cd ~/.tor/offlinemasterkeys/<IP_port>/keys

   mv secret_id_key.untrustedremotekey secret_id_key"'
  when: item.stdout != "1"
  with_items: rsakey.results

# this task is separated from the previous task because it is not run with 'force=no'
- name: Ensure (online) ed25519 keys are in place
  become: yes
  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }} owner={{ tor_user }} mode=700
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'ed25519_master_id_public_key', 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: Ensure Tor config directory exists and has appropriate permissions
  become: yes
  file: path={{ tor_ConfDir }}
    state=directory
    owner=root
    group={{ tor_user }}
    mode=755
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: Ensure LogDir exists and has appropriate permissions
  become: yes
  file: path={{ tor_LogDir }}
    state=directory
    owner={{ tor_user }}
    mode=750
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: Ensure PidDir is owned by tor_user
  become: yes
  file: path={{ tor_PidDir }}
    state=directory
    owner={{ tor_user }}
    group={{ tor_user }}
    mode=2750
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd

- name: Generating torrc file(s)
  become: yes
  template: >
    src=torrc
    dest="{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc"
    owner=root
    mode=0644
    backup=yes
    validate="tor --verify-config -f %s"
  with_nested:
   - tor_ips
   - tor_ports
  register: instances
  tags:
   - debian
   - centos
   - fedora
   - freebsd
   - openbsd
   - reconfigure

# Linux/systemd section (uses service module)
# ===========================================
 
- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)
  become: yes
  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded
  with_items: instances.results
  when: ansible_system == 'Linux' and item.changed == True 
  tags:
   - debian
   - centos
   - fedora
   - reconfigure

- name: Ensure Tor instances are enabled and started (Linux/systemd)
  become: yes
  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_system == 'Linux'
  tags:
   - debian
   - centos
   - fedora

# OpenBSD section (uses service module)
# This is basically a copy from the Linux
# section, but it requires different service
# names and additional arguments.
# =====================================

# OpenBSD does not support multi-instance rc.d
# # so we link as many pseudo rc scripts as we need.
# # OpenBSD does not like dots in rc filenames so
# # we replace them with underscores.
- name: Create links to the service files (OpenBSD)
  become: yes
  file: src=/etc/rc.d/tor state=link path=/etc/rc.d/tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_system == 'OpenBSD'
  tags:
   - openbsd

- name: Ensure Tor instances are enabled and started (OpenBSD)
  become: yes
  service: name=tor{{ item[0]|replace('.','_') }}_{{ item.1.orport }}
   arguments="-f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc" enabled=yes state=started
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_system == 'OpenBSD'
  tags:
   - openbsd

- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)
  become: yes
  service: name=tor{{ item.item[0]|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded
  with_items: instances.results
  when: ansible_system == 'OpenBSD' and item.changed == True
  tags:
   - openbsd
   - reconfigure


# FreeBSD section
# ================

- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)
  become: yes
  shell: "kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}.pid`"
  ignore_errors: yes
  with_items: instances.results
  when: item.changed == True and ansible_system == 'FreeBSD'
  tags:
   - freebsd
   - reconfigure

- name: Ensure Tor instances are running (FreeBSD)
  become: yes
  shell: "kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc"
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_system == 'FreeBSD'
  tags:
   - freebsd
