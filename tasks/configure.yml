---

- name: Ensure local DataDir folders exist (LOCAL)
  file:
    path: "{{ tor_offline_masterkey_dir }}/{{ item.name }}"
    state: directory
    mode: 0700
  delegate_to: localhost
  with_items: "{{ tor_identities }}"
  tags:
   - createdir

- name: Ensure all relay keys exist (LOCAL)
  command: >-
    tor --PublishServerDescriptor 0 --orport auto --list-fingerprint
    --datadirectory "{{ tor_offline_masterkey_dir }}/{{ item.name }}"
    --Log "err stdout"
  delegate_to: localhost
  with_items: "{{ tor_identities }}"

- name: Generate new Ed25519 signing keys (LOCAL)
  command: >-
    tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\ days
    --datadirectory "{{ tor_offline_masterkey_dir }}/{{ item.name }}"
    --Log "err stdout"
  delegate_to: localhost
  with_items: "{{ tor_identities }}"
  tags:
   - renewkey

- name: Detect duplicate relay keys across relays (LOCAL)
  shell: >-
    sha1sum {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key
    {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key | cut -d/ -f1 |sort | uniq -d |wc -l
  delegate_to: localhost
  failed_when: dupcount.stdout != "0"
  register: dupcount

- name: Detect if Ed25519 master keys are on the relay
  stat:
    path: "{{ tor_DataDir }}/{{ item.name }}/keys/ed25519_master_id_secret_key"
  become: yes
  register: masterkeycheck
  with_items: "{{ tor_identities }}"

- name: Abort if Ed25519 master keys are on the relay
  fail:
    msg: "Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting."
  when: item.stat.exists == True
  with_items: "{{ masterkeycheck.results }}"

- name: Collect fingerprints for MyFamily (LOCAL)
  shell: >-
    cut {{ tor_offline_masterkey_dir }}/*/fingerprint -d " " -f2 | xargs | sed -e 's/ /,/g'
  delegate_to: localhost
  register: family
  tags:
   - reconfigure

- name: Ensure per-instance tor users exist
  user:
    name: "_tor-{{ item.name }}"
    system: yes
    shell: /bin/false
    createhome: no
    home: "{{ tor_DataDir }}/{{ item.name }}"
  become: yes
  with_items: "{{ tor_identities }}"

- name: Ensure per-instance config folders exist (Debian only)
  file:
    path: "{{ tor_ConfDir }}/{{ item.name }}"
    state: directory
    mode: 0755
  become: yes
  with_items: "{{ tor_identities }}"
  when: ansible_pkg_mgr == 'apt'

- name: Ensure DataDir exists
  file:
    path: "{{ tor_DataDir }}"
    state: directory
    owner: root
    mode: 0755
  become: yes

- name: Ensure "keys" subfolder exists
  file:
    path: "{{ tor_DataDir }}/{{ item.name }}/keys"
    state: directory
    owner: "_tor-{{ item.name }}"
    group: "_tor-{{ item.name }}"
    mode: 0700
    recurse: yes
  become: yes
  with_items: "{{ tor_identities }}"

- name: Ensure RSA key is in place (without overriding existing keys)
  copy:
   src: "{{ tor_offline_masterkey_dir }}/{{ item.name }}/keys/secret_id_key"
   dest: "{{ tor_DataDir }}/{{ item.name }}/keys/secret_id_key"
   owner: "_tor-{{ item.name }}"
   mode: 0700
   force: no
  become: yes
  with_items: "{{ tor_identities }}"

- name: Fetch RSA key for comparision
  fetch:
    src: "{{ tor_DataDir }}/{{ item.name }}/keys/secret_id_key"
    dest: "{{ tor_offline_masterkey_dir }}/{{ item.name }}/keys/secret_id_key.untrustedremotekey"
    flat: yes
  become: yes
  with_items: "{{ tor_identities }}"

- name: Compare local vs. remote RSA key (secret_id_key)
  shell: >-
    sha1sum {{ tor_offline_masterkey_dir }}/{{ item.name }}/keys/secret_id_key* |
    cut -d/ -f1 | uniq -d | wc -l
  delegate_to: localhost
  with_items: "{{ tor_identities }}"
  register: rsakey

- name: Abort if local and remote RSA keys do not match
  fail:
    msg: |
      Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.

      We detected that the remote host uses an RSA key that was not generated by us.
      We will not override it with our locally generated key.

      If you want to make use of the remote RSA key you have to override the local key manually:

      cd ~/.tor/offlinemasterkeys/<instance_name>/keys

      mv secret_id_key.untrustedremotekey secret_id_key
  when: item.stdout != "1"
  with_items: "{{ rsakey.results }}"

# this task is separated from the task named "Ensure RSA key is in place" because it is not run with 'force=no'
- name: Transmit new Ed25519 signing keys
  copy:
   src: "{{ tor_offline_masterkey_dir }}/{{ item.0.name }}/keys/{{ item.1 }}"
   dest: "{{ tor_DataDir }}/{{ item.0.name }}/keys/{{ item.1 }}"
   owner: "_tor-{{ item.0.name }}"
   mode: 0700
   setype: tor_var_lib_t
  become: yes
  with_nested:
   - "{{ tor_identities }}"
   - ['ed25519_signing_cert', 'ed25519_signing_secret_key']
  tags:
   - renewkey

# This needs to be at the end to fix SELinux contexts recursively
- name: Ensure per-instance DataDir have proper permissions
  file:
    path: "{{ tor_DataDir }}/{{ item.name }}"
    state: directory
    owner: "_tor-{{ item.name }}"
    group: "_tor-{{ item.name }}"
    mode: 0700
    recurse: yes
    setype: tor_var_lib_t
  become: yes
  with_items: "{{ tor_identities }}"

- name: Ensure Tor config directory exists
  file:
    path: "{{ tor_ConfDir }}"
    state: directory
    owner: root
    group: "{{ tor_user }}"
    mode: 0755
  become: yes

- name: Ensure tor-exit-notice.html is present (if we are an exit)
  become: yes
  template: src=tor-exit-notice.html dest={{ tor_ConfDir }}/tor-exit-notice.html mode=444
  when: tor_ExitRelay == True and tor_ExitNoticePage == True

- name: Generating torrc file(s)
  template:
    src: torrc
    dest: "{{ (ansible_pkg_mgr != 'apt')|ternary(tor_ConfDir ~ '/' ~ item.name ~ '.torrc', tor_ConfDir ~ '/' ~ item.name ~ '/torrc') }}"
    owner: root
    mode: 0644
    backup: yes
    validate: "tor --verify-config -f %s"
  become: yes
  with_items: "{{ tor_identities }}"
  register: instances
  tags:
   - reconfigure
