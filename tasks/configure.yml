---

- name: Ensure local key folders exist (LOCAL)
  file: path={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys
    state=directory mode=700
  delegate_to: 127.0.0.1
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - createdir

- name: Ensure all relay keys exist (LOCAL)
  local_action: shell tor --PublishServerDescriptor 0 --orport 1234 --list-fingerprint --datadirectory {{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }} --Log "err stdout" > /dev/null
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Generate new Ed25519 signing keys
  local_action: shell tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\ days --datadirectory {{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }} --Log "err stdout" > /dev/null
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - renewkey

- name: Detect duplicate relay keys across relays (LOCAL)
  shell: sha1sum {{ offline_masterkey_dir }}/*/keys/secret_id_key {{ offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l
  delegate_to: 127.0.0.1
  register: dupcount

- name: Abort on duplicate relay keys
  fail: msg="Duplicate relay key detected! Aborting."
  when: dupcount.stdout != "0"

- name: Detect if Ed25519 master keys are on the relay
  stat: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key
  become: yes
  register: masterkeycheck
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Abort if Ed25519 master keys are on the relay
  fail: msg="

            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting."
  when: item.stat.exists == True
  with_items: masterkeycheck.results

- name: Collect fingerprints for MyFamily (LOCAL)
  shell: cut {{ offline_masterkey_dir }}/*/fingerprint -d" " -f2|xargs|sed -e 's/ /,/g'
  delegate_to: 127.0.0.1
  register: family
  tags:
   - reconfigure

- name: Ensure Tor DataDir exists
  become: yes
  file: path={{ tor_DataDir }}
    state=directory
    owner=root
    mode=0755

- name: Ensure per-instance system user exist
  become: yes
  user: name=_tor-{{ item[0] }}_{{ item.1.orport }} system=yes shell=/bin/false createhome=no home={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure instance config folders exist (Debian only)
  become: yes
  file: path={{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }} state=directory mode=755
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_pkg_mgr == 'apt'


- name: Ensure Tor "keys" directory exists and is owned by per-instance user
  become: yes
  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys
    state=directory
    owner="_tor-{{ item[0] }}_{{ item.1.orport }}"
    mode=0700
    recurse=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure RSA key is in place (without overriding existing keys)
  become: yes
  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
   owner="_tor-{{ item[0] }}_{{ item.1.orport }}"
   mode=700 force=no
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]

- name: Fetch RSA key for comparision
  become: yes
  fetch: src={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
    dest={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey
    flat=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]

- name: Compare local vs. remote RSA key (secret_id_key)
  local_action: shell sha1sum {{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  register: rsakey

- name: Abort if local and remote RSA keys do not match
  fail: 'msg="


   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.

   We deteted that the remote host uses an RSA key that was not generated by us.
   We will not override it with our locally generated key.

   If you want to make use of the remote RSA key you have to override the local key manually:


   cd ~/.tor/offlinemasterkeys/<IP_port>/keys

   mv secret_id_key.untrustedremotekey secret_id_key"'
  when: item.stdout != "1"
  with_items: rsakey.results

# this task is separated from the task named "Ensure RSA key is in place" because it is not run with 'force=no'
- name: Renew Ed25519 signing keys
  become: yes
  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}
   owner="_tor-{{ item[0] }}_{{ item.1.orport }}"
   mode=700
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'ed25519_master_id_public_key', 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]
  tags:
   - renewkey

- name: Ensure Tor config directory exists and has appropriate permissions
  become: yes
  file: path={{ tor_ConfDir }}
    state=directory
    owner=root
    group={{ tor_user }}
    mode=755

- name: Ensure LogDir exists and has appropriate permissions
  become: yes
  file: path={{ tor_LogDir }}
    state=directory
    owner=root
    mode=755
  when: ansible_pkg_mgr != 'apt'

# we only use distinct logfiles on systems that have no SyslogIdentityTag support yet (all non-Debian plaforms)
# otherwise we log to syslog with SyslogIdentityTag to avoid the filesystem permissions troubles with logrotate.
# We aim to log to syslog+SyslogIdentityTag for all platforms eventually.
# This is a medium-term workaround until all platform get SyslogIdentityTag support
# without this workaround tor will fail to start after logrotate created new logfiles because
# logrotate is not not aware that every tor instance runs under a distinct user.
# This effectively disables logrotate.
- name: Ensure per-instance log folders exist with appropriate permissions
  become: yes
  file: path={{ tor_LogDir }}/{{ item[0] }}_{{ item.1.orport }}
    state=directory
    owner=_tor-{{ item[0] }}_{{ item.1.orport }}
    group=_tor-{{ item[0] }}_{{ item.1.orport }}
    mode=700
  with_nested:
   - tor_ips
   - tor_ports
  when: ansible_pkg_mgr != 'apt'

- name: Generating torrc file(s)
  become: yes
  template: >
    src=torrc
    dest="{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '/torrc') }}"
    owner=root
    mode=0644
    backup=yes
    validate="tor --verify-config -f %s"
  with_nested:
   - tor_ips
   - tor_ports
  register: instances
  tags:
   - reconfigure
